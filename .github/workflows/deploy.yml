name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 소스 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: application.properties 파일을 SECRETS 에서 복사해서 생성
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES}}" >> ./src/main/resources/application.properties
          echo "server.address=0.0.0.0" >> ./src/main/resources/application.properties
      - name: 실행권한 부여 for gradlew
        run: chmod +x ./gradlew

      - name: 빌드하기 테스트 없이
        run: ./gradlew clean build -x test

      - name: AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR Docker Credential Helper 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 빌드
        run: docker build -t jpademo .

      - name: Docker 이미지 Tag 생성
        run: docker tag jpademo ${{ steps.login-ecr.outputs.registry }}/board-repo:latest

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/board-repo:latest

      - name: SSH로 EC2에 접속하기 - java 설치, 도커가 설치
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "📌 8080 포트를 사용 중인 프로세스 확인 및 종료"
            PID=$(sudo lsof -t -i:8080) || true
            if [ -n "$PID" ]; then
              echo "⛔ 8080 포트를 사용하는 PID: $PID → 종료"
              sudo kill -9 $PID
            fi
            
            echo "🛑 기존 jpademo 컨테이너 중지 및 삭제"
            docker stop jpademo || true
            docker rm jpademo || true
            
            echo "📥 최신 이미지 Pull"
            docker pull ${{ steps.login-ecr.outputs.registry }}/board-repo:latest
            
            echo "🚀 컨테이너 실행"
            docker run -d --name jpademo -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/board-repo:latest